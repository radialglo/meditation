function meditation(a,b,c){this.$board=$("#"+a);"single-player"===b?this.set_single_player():this.set_two_player();this.setImages(c);this.generateBoard()}
meditation.prototype={min_cnt:14,flip_count:0,new_board:!0,wait_time:1E3,mode:"single-player",get_mode:function(){return this.mode},set_single_player:function(){$("#mode-1").attr("checked",!0);this.mode="single-player"},set_two_player:function(){$("#mode-2").attr("checked",!0);this.mode="two-player"},card_one:"",set_card_one:function(a){this.card_one=a},card_two:"",set_card_two:function(a){this.card_two=a},cardsEqual:function(){return this.card_one===this.card_two},card_bg:"carbon_fibre",get_card_background:function(){return this.card_bg},
set_card_background:function(a){$(".front").removeClass(this.get_card_background()).addClass(a);this.card_bg=a},get_flip_count:function(){return this.flip_count},increment_flip_count:function(){this.flip_count++},reset_flip_count:function(){this.flip_count=0},reset_flips:function(){var a=this;setTimeout(function(){$(".flip").removeClass("flip");a.reset_flip_count()},this.wait_time)},pair_count:0,increment_pair_count:function(){this.pair_count++},reset_pair_count:function(){this.pair_count=0},gameOver:function(){return this.pair_count==
this.min_cnt},setImages:function(a){if(a.length>=this.min_cnt)a=shuffle(a).slice(0,this.min_cnt),a.forEach(function(b){a.push(b)}),this.image_list=shuffle(a);else throw"There must be a minimum of "+this.min_cnt+" images provided.";},getImages:function(){return this.image_list},get_board:function(){return this.$board},generateBoard:function(){var a=this.get_board(),b=this.getImages(),c=this;if(this.new_board){for(var d=0;d<b.length;d++)(function(b,d){a.append($("<div/>").addClass("holder").append($("<div/>").addClass("card").append($("<div/>").addClass("front face"),
$("<img/>").attr({src:b}).addClass("back face"))).click(function(){c.card_handler(this,b,d)}))})(b[d],d);$(".front").addClass(c.get_card_background());this.new_board=!1}else $(".holder").each(function(a){$(this).find("img").attr("src",b[a]).end().off("click").click(function(){c.card_handler(this,b[a],a)})});switch(this.mode){case "single-player":this.initialize_single_player();break;case "two-player":this.initialize_two_player();break;default:throw"Invalid game mode selected";}$("img").load(function(){$("#loader").hide()})},
card_handler:function(a,b){$card=$(a);if(!$card.hasClass("flip")&&2>this.get_flip_count()&&($card.toggleClass("flip"),this.increment_flip_count(),1===this.get_flip_count()&&this.set_card_one(b),2===this.get_flip_count()))if(this.set_card_two(b),this.cardsEqual()){if($(".flip").addClass("done").removeClass("flip").off("click"),this.reset_flip_count(),this.increment_pair_count(),"two-player"===this.get_mode()&&(this.is_turn_one()?this.increment_score_one():this.increment_score_two()),this.gameOver())if("two-player"===
this.get_mode()){var c='<div class="info"><hr/>',c=this.is_tie()?c+'<i class="icon-user orange"></i><i class="icon-user orange_red"></i>Tie Game':this.player_one_wins()?c+'<i class="icon-user orange">Wins</i>':c+'<i class="icon-user orange_red">Wins</i>';$("#overlay").text("").append(c+'<hr/><i class="icon-play-circle2" title="Play Again"></i><i class="icon-cancel close" title="Close"></i></div></div>').fadeIn()}else $("#overlay").text("").append('<div class="info"><hr/><i class="icon-trophy"></i><hr/>Puzzle Solved! Time: <span class="time">'+
$("#clock").text()+'</span><hr/><i class="icon-play-circle2" title="Play Again"></i><i class="icon-cancel close" title="Close"></i>').fadeIn()}else this.reset_flips(),"two-player"===this.get_mode()&&this.change_turns()},start_time:"",initialize_single_player:function(){$("#scoreboard").text("").append("<div id='clock'><span id='min'>00</span><em>:</em><span id='sec'>00</span><em>:</em><span id='centisec'>00</span></div>");this.start_watch()},start_watch:function(){this.start_time=(new Date).getTime();
this.count()},count:function(){var a=this;if(!a.gameOver()){var b=(new Date).getTime()-a.start_time,c=Math.floor(b/6E4),d=Math.floor(b%6E4/1E3),b=Math.floor(b%1E3/10);$("#sec").text(d.toString().replace(/^(\d)$/,"0$1"));$("#min").text(c.toString().replace(/^(\d)$/,"0$1"));$("#centisec").text(b.toString().replace(/^(\d)$/,"0$1"));setTimeout(function(){a.count()},10)}},turn_one:!0,is_turn_one:function(){return this.turn_one},player_one_wins:function(){return this.player_one_score>this.player_two_score},
is_tie:function(){return this.player_one_score===this.player_two_score},initialize_two_player:function(){$("#scoreboard").text("").append("<i id='player_one' class='icon-user' ></i><span id='score_one' class='score' >0</span><i id='player_two' class='icon-user'></i><span id='score_two' class='score'>0</span>");this.turn_one=!0;this.reset_flip_count();this.reset_scores();setTimeout(function(){$("#player_one").animate({opacity:1});$("#player_two").animate({opacity:0.3})},this.wait_time)},change_turns:function(){this.turn_one=
!this.turn_one;this.is_turn_one()?setTimeout(function(){$("#player_one").animate({opacity:1});$("#player_two").animate({opacity:0.3})},this.wait_time):setTimeout(function(){$("#player_one").animate({opacity:0.3});$("#player_two").animate({opacity:1})},this.wait_time)},player_one_score:0,player_two_score:0,increment_score_one:function(){this.player_one_score++;this.update_score_one()},increment_score_two:function(){this.player_two_score++;this.update_score_two()},update_score_one:function(){$("#score_one").text(this.player_one_score)},
update_score_two:function(){$("#score_two").text(this.player_two_score)},reset_scores:function(){this.player_two_score=this.player_one_score=0;this.update_score_one();this.update_score_two()},restart:function(a){$("holder").off("click");$(".done").removeClass("done");$(".flip").removeClass("flip");var b=this;b.reset_pair_count();setTimeout(function(){b.setImages(a);b.generateBoard()},2*b.wait_time)}};
function shuffle(a){for(var b,c,d=a.length-1;0<d;d--)b=Math.floor(Math.random()*d),c=a[b],a[b]=a[d],a[d]=c;return a};